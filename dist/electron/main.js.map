{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////Users/mac/Documents/cxq/web/a-plan/node_modules/electron-is-dev/index.js","webpack:////Users/mac/Documents/cxq/web/a-plan/node_modules/node-pty/lib sync","webpack:////Users/mac/Documents/cxq/web/a-plan/node_modules/node-pty/lib/index.js","webpack:////Users/mac/Documents/cxq/web/a-plan/node_modules/node-pty/lib/terminal.js","webpack:////Users/mac/Documents/cxq/web/a-plan/node_modules/node-pty/lib/unixTerminal.js","webpack:////Users/mac/Documents/cxq/web/a-plan/node_modules/node-pty/lib/utils.js","webpack:////Users/mac/Documents/cxq/web/a-plan/node_modules/node-pty/lib/windowsPtyAgent.js","webpack:////Users/mac/Documents/cxq/web/a-plan/node_modules/node-pty/lib/windowsTerminal.js","webpack:////Users/mac/Documents/cxq/web/a-plan/src/main/index.js","webpack:////Users/mac/Documents/cxq/web/a-plan/src/main/menu.js","webpack:////Users/mac/Documents/cxq/web/a-plan/src/main/terminal.js","webpack:///external \"child_process\"","webpack:///external \"electron\"","webpack:///external \"events\"","webpack:///external \"net\"","webpack:///external \"os\"","webpack:///external \"path\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFa;AACb,iBAAiB,mBAAO,CAAC,0BAAU;;AAEnC;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA,0E;;;;;;;;;;;;ACRa;AACb;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,WAAW,mBAAO,CAAC,kBAAM;AACzB;AACA;AACA,mBAAmB,mBAAO,CAAC,6EAAmB;AAC9C;AACA;AACA,mBAAmB,mBAAO,CAAC,uEAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,sEAAQ,+CAA+C,CAAC;AACzG,iC;;;;;;;;;;;;AClDa;AACb;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,sBAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kBAAkB,EAAE;AAC9C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,8BAA8B;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,gCAAgC;AAChC;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,oC;;;;;;;;;;;;AChHa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D,UAAU,mBAAO,CAAC,gBAAK;AACvB,iBAAiB,mBAAO,CAAC,+DAAY;AACrC,cAAc,mBAAO,CAAC,yDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0BAA0B,qBAAqB,EAAE;AACjD;AACA;AACA,KAAK;AACL;AACA,0BAA0B,oBAAoB,EAAE;AAChD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA;AACA,CAAC;AACD,wC;;;;;;;;;;;;AC7Pa;AACb;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,WAAW,mBAAO,CAAC,kBAAM;AACzB;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA,uCAAuC,oDAAoD,kCAAkC,EAAE,EAAE,EAAE;AACnI;AACA;AACA;AACA;AACA;AACA,eAAe,sEAAQ,yDAAyD,CAAC;AACjF;AACA;AACA,eAAe,sEAAQ,uDAAuD,CAAC;AAC/E;AACA;AACA;AACA,iC;;;;;;;;;;;;ACzBA,iDAAa;AACb;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,cAAI;AACrB,WAAW,mBAAO,CAAC,kBAAM;AACzB,YAAY,mBAAO,CAAC,gBAAK;AACzB,cAAc,mBAAO,CAAC,yDAAS;AAC/B,sBAAsB,mBAAO,CAAC,oCAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uBAAuB,EAAE;AACnD;AACA;AACA,KAAK;AACL;AACA,0BAA0B,wBAAwB,EAAE;AACpD;AACA;AACA,KAAK;AACL;AACA,0BAA0B,iBAAiB,EAAE;AAC7C;AACA;AACA,KAAK;AACL;AACA,0BAA0B,uBAAuB,EAAE;AACnD;AACA;AACA,KAAK;AACL;AACA,0BAA0B,kBAAkB,EAAE;AAC9C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qCAAqC,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gCAAgC,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2C;;;;;;;;;;;;;AC9Ra;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,+DAAY;AACrC,wBAAwB,mBAAO,CAAC,6EAAmB;AACnD,cAAc,mBAAO,CAAC,yDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sCAAsC;AACpE,SAAS;AACT;AACA;AACA,0BAA0B,mBAAmB,EAAE;AAC/C;AACA;AACA,KAAK;AACL;AACA,0BAA0B,uDAAuD,EAAE;AACnF;AACA;AACA,KAAK;AACL;AACA,0BAA0B,sDAAsD,EAAE;AAClF;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,2C;;;;;;;;;;;ACxLA,kEAAiB,mBAAO,CAAC,0BAAU;AACnC;AACA;AACA;AACA;AACA,OAAO,iBAAiB,GAAG,mBAAO,CAAC,8CAAY;AAC/C,aAAa,mBAAO,CAAC,kBAAM;AAC3B,cAAc,mBAAO,CAAC,oEAAiB;AACvC,mBAAO,CAAC,sCAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,iEAAiE,4CAA4C;AAC7G;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,OAAO;AACP,qBAAqB;AACrB;AACA;AACA;AACA,OAAO;AACP,CAAC;;AAED;AACA,wB;;;;;;;;;;;;;;ACnDA,iBAAiB,mBAAO,CAAC,0BAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA,8B;;;;;;;;;;;ACrCA,YAAY,mBAAO,CAAC,0DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH,C;;;;;;;;;;;AC3BA,0C;;;;;;;;;;;ACAA,qC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,gC;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,iC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"../../src/main/index.js\");\n","'use strict';\nconst electron = require('electron');\n\nconst app = electron.app || electron.remote.app;\n\nconst isEnvSet = 'ELECTRON_IS_DEV' in process.env;\nconst getFromEnv = parseInt(process.env.ELECTRON_IS_DEV, 10) === 1;\n\nmodule.exports = isEnvSet ? getFromEnv : !app.isPackaged;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../node_modules/node-pty/lib sync recursive\";","\"use strict\";\n/**\n * Copyright (c) 2012-2015, Christopher Jeffrey, Peter Sunde (MIT License)\n * Copyright (c) 2016, Daniel Imms (MIT License).\n * Copyright (c) 2018, Microsoft Corporation (MIT License).\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar path = require(\"path\");\nvar terminalCtor;\nif (process.platform === 'win32') {\n    terminalCtor = require('./windowsTerminal').WindowsTerminal;\n}\nelse {\n    terminalCtor = require('./unixTerminal').UnixTerminal;\n}\n/**\n * Forks a process as a pseudoterminal.\n * @param file The file to launch.\n * @param args The file's arguments as argv (string[]) or in a pre-escaped\n * CommandLine format (string). Note that the CommandLine option is only\n * available on Windows and is expected to be escaped properly.\n * @param options The options of the terminal.\n * @throws When the file passed to spawn with does not exists.\n * @see CommandLineToArgvW https://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx\n * @see Parsing C++ Comamnd-Line Arguments https://msdn.microsoft.com/en-us/library/17w5ykft.aspx\n * @see GetCommandLine https://msdn.microsoft.com/en-us/library/windows/desktop/ms683156.aspx\n */\nfunction spawn(file, args, opt) {\n    return new terminalCtor(file, args, opt);\n}\nexports.spawn = spawn;\n/** @deprecated */\nfunction fork(file, args, opt) {\n    return new terminalCtor(file, args, opt);\n}\nexports.fork = fork;\n/** @deprecated */\nfunction createTerminal(file, args, opt) {\n    return new terminalCtor(file, args, opt);\n}\nexports.createTerminal = createTerminal;\nfunction open(options) {\n    return terminalCtor.open(options);\n}\nexports.open = open;\n/**\n * Expose the native API when not Windows, note that this is not public API and\n * could be removed at any time.\n */\nexports.native = (process.platform !== 'win32' ? require(path.join('..', 'build', 'Release', 'pty.node')) : null);\n//# sourceMappingURL=index.js.map","\"use strict\";\n/**\n * Copyright (c) 2012-2015, Christopher Jeffrey (MIT License)\n * Copyright (c) 2016, Daniel Imms (MIT License).\n * Copyright (c) 2018, Microsoft Corporation (MIT License).\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"events\");\nexports.DEFAULT_COLS = 80;\nexports.DEFAULT_ROWS = 24;\nvar Terminal = /** @class */ (function () {\n    function Terminal(opt) {\n        // for 'close'\n        this._internalee = new events_1.EventEmitter();\n        if (!opt) {\n            return;\n        }\n        // Do basic type checks here in case node-pty is being used within JavaScript. If the wrong\n        // types go through to the C++ side it can lead to hard to diagnose exceptions.\n        this._checkType('name', opt.name ? opt.name : null, 'string');\n        this._checkType('cols', opt.cols ? opt.cols : null, 'number');\n        this._checkType('rows', opt.rows ? opt.rows : null, 'number');\n        this._checkType('cwd', opt.cwd ? opt.cwd : null, 'string');\n        this._checkType('env', opt.env ? opt.env : null, 'object');\n        this._checkType('uid', opt.uid ? opt.uid : null, 'number');\n        this._checkType('gid', opt.gid ? opt.gid : null, 'number');\n        this._checkType('encoding', opt.encoding ? opt.encoding : null, 'string');\n    }\n    Object.defineProperty(Terminal.prototype, \"pid\", {\n        get: function () { return this._pid; },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype._checkType = function (name, value, type) {\n        if (value && typeof value !== type) {\n            throw new Error(name + \" must be a \" + type + \" (not a \" + typeof value + \")\");\n        }\n    };\n    /** See net.Socket.end */\n    Terminal.prototype.end = function (data) {\n        this._socket.end(data);\n    };\n    /** See stream.Readable.pipe */\n    Terminal.prototype.pipe = function (dest, options) {\n        return this._socket.pipe(dest, options);\n    };\n    /** See net.Socket.pause */\n    Terminal.prototype.pause = function () {\n        return this._socket.pause();\n    };\n    /** See net.Socket.resume */\n    Terminal.prototype.resume = function () {\n        return this._socket.resume();\n    };\n    /** See net.Socket.setEncoding */\n    Terminal.prototype.setEncoding = function (encoding) {\n        if (this._socket._decoder) {\n            delete this._socket._decoder;\n        }\n        if (encoding) {\n            this._socket.setEncoding(encoding);\n        }\n    };\n    Terminal.prototype.addListener = function (eventName, listener) { this.on(eventName, listener); };\n    Terminal.prototype.on = function (eventName, listener) {\n        if (eventName === 'close') {\n            this._internalee.on('close', listener);\n            return;\n        }\n        this._socket.on(eventName, listener);\n    };\n    Terminal.prototype.emit = function (eventName) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (eventName === 'close') {\n            return this._internalee.emit.apply(this._internalee, arguments);\n        }\n        return this._socket.emit.apply(this._socket, arguments);\n    };\n    Terminal.prototype.listeners = function (eventName) {\n        return this._socket.listeners(eventName);\n    };\n    Terminal.prototype.removeListener = function (eventName, listener) {\n        this._socket.removeListener(eventName, listener);\n    };\n    Terminal.prototype.removeAllListeners = function (eventName) {\n        this._socket.removeAllListeners(eventName);\n    };\n    Terminal.prototype.once = function (eventName, listener) {\n        this._socket.once(eventName, listener);\n    };\n    Terminal.prototype._close = function () {\n        this._socket.writable = false;\n        this._socket.readable = false;\n        this.write = function () { };\n        this.end = function () { };\n        this._writable = false;\n        this._readable = false;\n    };\n    Terminal.prototype._parseEnv = function (env) {\n        var keys = Object.keys(env || {});\n        var pairs = [];\n        for (var i = 0; i < keys.length; i++) {\n            pairs.push(keys[i] + '=' + env[keys[i]]);\n        }\n        return pairs;\n    };\n    return Terminal;\n}());\nexports.Terminal = Terminal;\n//# sourceMappingURL=terminal.js.map","\"use strict\";\n/**\n * Copyright (c) 2012-2015, Christopher Jeffrey (MIT License)\n * Copyright (c) 2016, Daniel Imms (MIT License).\n * Copyright (c) 2018, Microsoft Corporation (MIT License).\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar net = require(\"net\");\nvar terminal_1 = require(\"./terminal\");\nvar utils_1 = require(\"./utils\");\nvar pty = utils_1.loadNative('pty');\nvar DEFAULT_FILE = 'sh';\nvar DEFAULT_NAME = 'xterm';\nvar DESTROY_SOCKET_TIMEOUT_MS = 200;\nvar UnixTerminal = /** @class */ (function (_super) {\n    __extends(UnixTerminal, _super);\n    function UnixTerminal(file, args, opt) {\n        var _this = _super.call(this, opt) || this;\n        if (typeof args === 'string') {\n            throw new Error('args as a string is not supported on unix.');\n        }\n        // Initialize arguments\n        args = args || [];\n        file = file || DEFAULT_FILE;\n        opt = opt || {};\n        opt.env = opt.env || process.env;\n        var cols = opt.cols || terminal_1.DEFAULT_COLS;\n        var rows = opt.rows || terminal_1.DEFAULT_ROWS;\n        var uid = opt.uid || -1;\n        var gid = opt.gid || -1;\n        var env = utils_1.assign({}, opt.env);\n        if (opt.env === process.env) {\n            _this._sanitizeEnv(env);\n        }\n        var cwd = opt.cwd || process.cwd();\n        var name = opt.name || env.TERM || DEFAULT_NAME;\n        env.TERM = name;\n        var parsedEnv = _this._parseEnv(env);\n        var encoding = (opt.encoding === undefined ? 'utf8' : opt.encoding);\n        var onexit = function (code, signal) {\n            // XXX Sometimes a data event is emitted after exit. Wait til socket is\n            // destroyed.\n            if (!_this._emittedClose) {\n                if (_this._boundClose) {\n                    return;\n                }\n                _this._boundClose = true;\n                // From macOS High Sierra 10.13.2 sometimes the socket never gets\n                // closed. A timeout is applied here to avoid the terminal never being\n                // destroyed when this occurs.\n                var timeout_1 = setTimeout(function () {\n                    timeout_1 = null;\n                    // Destroying the socket now will cause the close event to fire\n                    _this._socket.destroy();\n                }, DESTROY_SOCKET_TIMEOUT_MS);\n                _this.once('close', function () {\n                    if (timeout_1 !== null) {\n                        clearTimeout(timeout_1);\n                    }\n                    _this.emit('exit', code, signal);\n                });\n                return;\n            }\n            _this.emit('exit', code, signal);\n        };\n        // fork\n        var term = pty.fork(file, args, parsedEnv, cwd, cols, rows, uid, gid, (encoding === 'utf8'), onexit);\n        _this._socket = new PipeSocket(term.fd);\n        if (encoding !== null) {\n            _this._socket.setEncoding(encoding);\n        }\n        // setup\n        _this._socket.on('error', function (err) {\n            // NOTE: fs.ReadStream gets EAGAIN twice at first:\n            if (err.code) {\n                if (~err.code.indexOf('EAGAIN')) {\n                    return;\n                }\n            }\n            // close\n            _this._close();\n            // EIO on exit from fs.ReadStream:\n            if (!_this._emittedClose) {\n                _this._emittedClose = true;\n                _this.emit('close');\n            }\n            // EIO, happens when someone closes our child process: the only process in\n            // the terminal.\n            // node < 0.6.14: errno 5\n            // node >= 0.6.14: read EIO\n            if (err.code) {\n                if (~err.code.indexOf('errno 5') || ~err.code.indexOf('EIO')) {\n                    return;\n                }\n            }\n            // throw anything else\n            if (_this.listeners('error').length < 2) {\n                throw err;\n            }\n        });\n        _this._pid = term.pid;\n        _this._fd = term.fd;\n        _this._pty = term.pty;\n        _this._file = file;\n        _this._name = name;\n        _this._readable = true;\n        _this._writable = true;\n        _this._socket.on('close', function () {\n            if (_this._emittedClose) {\n                return;\n            }\n            _this._emittedClose = true;\n            _this._close();\n            _this.emit('close');\n        });\n        return _this;\n    }\n    Object.defineProperty(UnixTerminal.prototype, \"master\", {\n        get: function () { return this._master; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UnixTerminal.prototype, \"slave\", {\n        get: function () { return this._slave; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * openpty\n     */\n    UnixTerminal.open = function (opt) {\n        var self = Object.create(UnixTerminal.prototype);\n        opt = opt || {};\n        if (arguments.length > 1) {\n            opt = {\n                cols: arguments[1],\n                rows: arguments[2]\n            };\n        }\n        var cols = opt.cols || terminal_1.DEFAULT_COLS;\n        var rows = opt.rows || terminal_1.DEFAULT_ROWS;\n        var encoding = opt.encoding ? 'utf8' : opt.encoding;\n        // open\n        var term = pty.open(cols, rows);\n        self._master = new PipeSocket(term.master);\n        self._master.setEncoding(encoding);\n        self._master.resume();\n        self._slave = new PipeSocket(term.slave);\n        self._slave.setEncoding(encoding);\n        self._slave.resume();\n        self._socket = self._master;\n        self._pid = null;\n        self._fd = term.master;\n        self._pty = term.pty;\n        self._file = process.argv[0] || 'node';\n        self._name = process.env.TERM || '';\n        self._readable = true;\n        self._writable = true;\n        self._socket.on('error', function (err) {\n            self._close();\n            if (self.listeners('error').length < 2) {\n                throw err;\n            }\n        });\n        self._socket.on('close', function () {\n            self._close();\n        });\n        return self;\n    };\n    UnixTerminal.prototype.write = function (data) {\n        this._socket.write(data);\n    };\n    UnixTerminal.prototype.destroy = function () {\n        var _this = this;\n        this._close();\n        // Need to close the read stream so node stops reading a dead file\n        // descriptor. Then we can safely SIGHUP the shell.\n        this._socket.once('close', function () {\n            _this.kill('SIGHUP');\n        });\n        this._socket.destroy();\n    };\n    UnixTerminal.prototype.kill = function (signal) {\n        try {\n            process.kill(this.pid, signal || 'SIGHUP');\n        }\n        catch (e) { /* swallow */ }\n    };\n    Object.defineProperty(UnixTerminal.prototype, \"process\", {\n        /**\n         * Gets the name of the process.\n         */\n        get: function () {\n            return pty.process(this._fd, this._pty) || this._file;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * TTY\n     */\n    UnixTerminal.prototype.resize = function (cols, rows) {\n        pty.resize(this._fd, cols, rows);\n    };\n    UnixTerminal.prototype._sanitizeEnv = function (env) {\n        // Make sure we didn't start our server from inside tmux.\n        delete env['TMUX'];\n        delete env['TMUX_PANE'];\n        // Make sure we didn't start our server from inside screen.\n        // http://web.mit.edu/gnu/doc/html/screen_20.html\n        delete env['STY'];\n        delete env['WINDOW'];\n        // Delete some variables that might confuse our terminal.\n        delete env['WINDOWID'];\n        delete env['TERMCAP'];\n        delete env['COLUMNS'];\n        delete env['LINES'];\n    };\n    return UnixTerminal;\n}(terminal_1.Terminal));\nexports.UnixTerminal = UnixTerminal;\n/**\n * Wraps net.Socket to force the handle type \"PIPE\" by temporarily overwriting\n * tty_wrap.guessHandleType.\n * See: https://github.com/chjj/pty.js/issues/103\n */\nvar PipeSocket = /** @class */ (function (_super) {\n    __extends(PipeSocket, _super);\n    function PipeSocket(fd) {\n        var _this = this;\n        var tty = process.binding('tty_wrap');\n        var guessHandleType = tty.guessHandleType;\n        tty.guessHandleType = function () { return 'PIPE'; };\n        // @types/node has fd as string? https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18275\n        _this = _super.call(this, { fd: fd }) || this;\n        tty.guessHandleType = guessHandleType;\n        return _this;\n    }\n    return PipeSocket;\n}(net.Socket));\n//# sourceMappingURL=unixTerminal.js.map","\"use strict\";\n/**\n * Copyright (c) 2017, Daniel Imms (MIT License).\n * Copyright (c) 2018, Microsoft Corporation (MIT License).\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar path = require(\"path\");\nfunction assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) { return Object.keys(source).forEach(function (key) { return target[key] = source[key]; }); });\n    return target;\n}\nexports.assign = assign;\nfunction loadNative(moduleName) {\n    try {\n        return require(path.join('..', 'build', 'Release', moduleName + \".node\"));\n    }\n    catch (_a) {\n        return require(path.join('..', 'build', 'Debug', moduleName + \".node\"));\n    }\n}\nexports.loadNative = loadNative;\n//# sourceMappingURL=utils.js.map","\"use strict\";\n/**\n * Copyright (c) 2012-2015, Christopher Jeffrey, Peter Sunde (MIT License)\n * Copyright (c) 2016, Daniel Imms (MIT License).\n * Copyright (c) 2018, Microsoft Corporation (MIT License).\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar os = require(\"os\");\nvar path = require(\"path\");\nvar net_1 = require(\"net\");\nvar utils_1 = require(\"./utils\");\nvar child_process_1 = require(\"child_process\");\nvar conptyNative;\nvar winptyNative;\n/**\n * The amount of time to wait for additional data after the conpty shell process has exited before\n * shutting down the socket. The timer will be reset if a new data event comes in after the timer\n * has started.\n */\nvar FLUSH_DATA_INTERVAL = 20;\n/**\n * This agent sits between the WindowsTerminal class and provides a common interface for both conpty\n * and winpty.\n */\nvar WindowsPtyAgent = /** @class */ (function () {\n    function WindowsPtyAgent(file, args, env, cwd, cols, rows, debug, _useConpty) {\n        var _this = this;\n        this._useConpty = _useConpty;\n        if (this._useConpty === undefined || this._useConpty === true) {\n            this._useConpty = this._getWindowsBuildNumber() >= 18309;\n        }\n        if (this._useConpty) {\n            if (!conptyNative) {\n                conptyNative = utils_1.loadNative('conpty');\n            }\n        }\n        else {\n            if (!winptyNative) {\n                winptyNative = utils_1.loadNative('pty');\n            }\n        }\n        this._ptyNative = this._useConpty ? conptyNative : winptyNative;\n        // Sanitize input variable.\n        cwd = path.resolve(cwd);\n        // Compose command line\n        var commandLine = argsToCommandLine(file, args);\n        // Open pty session.\n        var term;\n        if (this._useConpty) {\n            term = this._ptyNative.startProcess(file, cols, rows, debug, this._generatePipeName());\n        }\n        else {\n            term = this._ptyNative.startProcess(file, commandLine, env, cwd, cols, rows, debug);\n            this._pid = term.pid;\n            this._innerPid = term.innerPid;\n            this._innerPidHandle = term.innerPidHandle;\n        }\n        // Not available on windows.\n        this._fd = term.fd;\n        // Generated incremental number that has no real purpose besides  using it\n        // as a terminal id.\n        this._pty = term.pty;\n        // Create terminal pipe IPC channel and forward to a local unix socket.\n        this._outSocket = new net_1.Socket();\n        this._outSocket.setEncoding('utf8');\n        this._outSocket.connect(term.conout, function () {\n            // TODO: Emit event on agent instead of socket?\n            // Emit ready event.\n            _this._outSocket.emit('ready_datapipe');\n        });\n        this._inSocket = new net_1.Socket();\n        this._inSocket.setEncoding('utf8');\n        this._inSocket.connect(term.conin);\n        // TODO: Wait for ready event?\n        if (this._useConpty) {\n            var connect = this._ptyNative.connect(this._pty, commandLine, cwd, env, this._$onProcessExit.bind(this));\n            this._innerPid = connect.pid;\n        }\n    }\n    Object.defineProperty(WindowsPtyAgent.prototype, \"inSocket\", {\n        get: function () { return this._inSocket; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowsPtyAgent.prototype, \"outSocket\", {\n        get: function () { return this._outSocket; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowsPtyAgent.prototype, \"fd\", {\n        get: function () { return this._fd; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowsPtyAgent.prototype, \"innerPid\", {\n        get: function () { return this._innerPid; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowsPtyAgent.prototype, \"pty\", {\n        get: function () { return this._pty; },\n        enumerable: true,\n        configurable: true\n    });\n    WindowsPtyAgent.prototype.resize = function (cols, rows) {\n        if (this._useConpty) {\n            if (this._exitCode !== undefined) {\n                throw new Error('Cannot resize a pty that has already exited');\n            }\n            this._ptyNative.resize(this._pty, cols, rows);\n            return;\n        }\n        this._ptyNative.resize(this._pid, cols, rows);\n    };\n    WindowsPtyAgent.prototype.kill = function () {\n        var _this = this;\n        this._inSocket.readable = false;\n        this._inSocket.writable = false;\n        this._outSocket.readable = false;\n        this._outSocket.writable = false;\n        // Tell the agent to kill the pty, this releases handles to the process\n        if (this._useConpty) {\n            this._getConsoleProcessList().then(function (consoleProcessList) {\n                consoleProcessList.forEach(function (pid) {\n                    try {\n                        process.kill(pid);\n                    }\n                    catch (e) {\n                        // Ignore if process cannot be found (kill ESRCH error)\n                    }\n                });\n                _this._ptyNative.kill(_this._pty);\n            });\n        }\n        else {\n            this._ptyNative.kill(this._pid, this._innerPidHandle);\n            // Since pty.kill closes the handle it will kill most processes by itself\n            // and process IDs can be reused as soon as all handles to them are\n            // dropped, we want to immediately kill the entire console process list.\n            // If we do not force kill all processes here, node servers in particular\n            // seem to become detached and remain running (see\n            // Microsoft/vscode#26807).\n            var processList = this._ptyNative.getProcessList(this._pid);\n            processList.forEach(function (pid) {\n                try {\n                    process.kill(pid);\n                }\n                catch (e) {\n                    // Ignore if process cannot be found (kill ESRCH error)\n                }\n            });\n        }\n    };\n    WindowsPtyAgent.prototype._getConsoleProcessList = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var agent = child_process_1.fork(path.join(__dirname, 'conpty_console_list_agent'), [_this._innerPid.toString()]);\n            agent.on('message', function (message) {\n                clearTimeout(timeout);\n                resolve(message.consoleProcessList);\n            });\n            var timeout = setTimeout(function () {\n                // Something went wrong, just send back the shell PID\n                console.error('Could not fetch console process list');\n                agent.kill();\n                resolve([_this._innerPid]);\n            }, 5000);\n        });\n    };\n    Object.defineProperty(WindowsPtyAgent.prototype, \"exitCode\", {\n        get: function () {\n            if (this._useConpty) {\n                return this._exitCode;\n            }\n            return this._ptyNative.getExitCode(this._innerPidHandle);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WindowsPtyAgent.prototype._getWindowsBuildNumber = function () {\n        var osVersion = (/(\\d+)\\.(\\d+)\\.(\\d+)/g).exec(os.release());\n        var buildNumber = 0;\n        if (osVersion && osVersion.length === 4) {\n            buildNumber = parseInt(osVersion[3]);\n        }\n        return buildNumber;\n    };\n    WindowsPtyAgent.prototype._generatePipeName = function () {\n        return \"conpty-\" + Math.random() * 10000000;\n    };\n    /**\n     * Triggered from the native side when a contpy process exits.\n     */\n    WindowsPtyAgent.prototype._$onProcessExit = function (exitCode) {\n        var _this = this;\n        this._exitCode = exitCode;\n        this._flushDataAndCleanUp();\n        this._outSocket.on('data', function () { return _this._flushDataAndCleanUp(); });\n    };\n    WindowsPtyAgent.prototype._flushDataAndCleanUp = function () {\n        var _this = this;\n        if (this._closeTimeout) {\n            clearTimeout(this._closeTimeout);\n        }\n        this._closeTimeout = setTimeout(function () { return _this._cleanUpProcess(); }, FLUSH_DATA_INTERVAL);\n    };\n    WindowsPtyAgent.prototype._cleanUpProcess = function () {\n        this._inSocket.readable = false;\n        this._inSocket.writable = false;\n        this._outSocket.readable = false;\n        this._outSocket.writable = false;\n        this._outSocket.destroy();\n    };\n    return WindowsPtyAgent;\n}());\nexports.WindowsPtyAgent = WindowsPtyAgent;\n// Convert argc/argv into a Win32 command-line following the escaping convention\n// documented on MSDN (e.g. see CommandLineToArgvW documentation). Copied from\n// winpty project.\nfunction argsToCommandLine(file, args) {\n    if (isCommandLine(args)) {\n        if (args.length === 0) {\n            return file;\n        }\n        return argsToCommandLine(file, []) + \" \" + args;\n    }\n    var argv = [file];\n    Array.prototype.push.apply(argv, args);\n    var result = '';\n    for (var argIndex = 0; argIndex < argv.length; argIndex++) {\n        if (argIndex > 0) {\n            result += ' ';\n        }\n        var arg = argv[argIndex];\n        // if it is empty or it contains whitespace and is not already quoted\n        var hasLopsidedEnclosingQuote = xOr((arg[0] !== '\"'), (arg[arg.length - 1] !== '\"'));\n        var hasNoEnclosingQuotes = ((arg[0] !== '\"') && (arg[arg.length - 1] !== '\"'));\n        var quote = arg === '' ||\n            (arg.indexOf(' ') !== -1 ||\n                arg.indexOf('\\t') !== -1) &&\n                ((arg.length > 1) &&\n                    (hasLopsidedEnclosingQuote || hasNoEnclosingQuotes));\n        if (quote) {\n            result += '\\\"';\n        }\n        var bsCount = 0;\n        for (var i = 0; i < arg.length; i++) {\n            var p = arg[i];\n            if (p === '\\\\') {\n                bsCount++;\n            }\n            else if (p === '\"') {\n                result += repeatText('\\\\', bsCount * 2 + 1);\n                result += '\"';\n                bsCount = 0;\n            }\n            else {\n                result += repeatText('\\\\', bsCount);\n                bsCount = 0;\n                result += p;\n            }\n        }\n        if (quote) {\n            result += repeatText('\\\\', bsCount * 2);\n            result += '\\\"';\n        }\n        else {\n            result += repeatText('\\\\', bsCount);\n        }\n    }\n    return result;\n}\nexports.argsToCommandLine = argsToCommandLine;\nfunction isCommandLine(args) {\n    return typeof args === 'string';\n}\nfunction repeatText(text, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += text;\n    }\n    return result;\n}\nfunction xOr(arg1, arg2) {\n    return ((arg1 && !arg2) || (!arg1 && arg2));\n}\n//# sourceMappingURL=windowsPtyAgent.js.map","\"use strict\";\n/**\n * Copyright (c) 2012-2015, Christopher Jeffrey, Peter Sunde (MIT License)\n * Copyright (c) 2016, Daniel Imms (MIT License).\n * Copyright (c) 2018, Microsoft Corporation (MIT License).\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar terminal_1 = require(\"./terminal\");\nvar windowsPtyAgent_1 = require(\"./windowsPtyAgent\");\nvar utils_1 = require(\"./utils\");\nvar DEFAULT_FILE = 'cmd.exe';\nvar DEFAULT_NAME = 'Windows Shell';\nvar WindowsTerminal = /** @class */ (function (_super) {\n    __extends(WindowsTerminal, _super);\n    function WindowsTerminal(file, args, opt) {\n        var _this = _super.call(this, opt) || this;\n        // Initialize arguments\n        args = args || [];\n        file = file || DEFAULT_FILE;\n        opt = opt || {};\n        opt.env = opt.env || process.env;\n        if (opt.encoding) {\n            console.warn('Setting encoding on Windows is not supported');\n        }\n        var env = utils_1.assign({}, opt.env);\n        var cols = opt.cols || terminal_1.DEFAULT_COLS;\n        var rows = opt.rows || terminal_1.DEFAULT_ROWS;\n        var cwd = opt.cwd || process.cwd();\n        var name = opt.name || env.TERM || DEFAULT_NAME;\n        var parsedEnv = _this._parseEnv(env);\n        // If the terminal is ready\n        _this._isReady = false;\n        // Functions that need to run after `ready` event is emitted.\n        _this._deferreds = [];\n        // Create new termal.\n        _this._agent = new windowsPtyAgent_1.WindowsPtyAgent(file, args, parsedEnv, cwd, cols, rows, false, opt.experimentalUseConpty);\n        _this._socket = _this._agent.outSocket;\n        // Not available until `ready` event emitted.\n        _this._pid = _this._agent.innerPid;\n        _this._fd = _this._agent.fd;\n        _this._pty = _this._agent.pty;\n        // The forked windows terminal is not available until `ready` event is\n        // emitted.\n        _this._socket.on('ready_datapipe', function () {\n            // These events needs to be forwarded.\n            ['connect', 'data', 'end', 'timeout', 'drain'].forEach(function (event) {\n                _this._socket.on(event, function () {\n                    // Wait until the first data event is fired then we can run deferreds.\n                    if (!_this._isReady && event === 'data') {\n                        // Terminal is now ready and we can avoid having to defer method\n                        // calls.\n                        _this._isReady = true;\n                        // Execute all deferred methods\n                        _this._deferreds.forEach(function (fn) {\n                            // NB! In order to ensure that `this` has all its references\n                            // updated any variable that need to be available in `this` before\n                            // the deferred is run has to be declared above this forEach\n                            // statement.\n                            fn.run();\n                        });\n                        // Reset\n                        _this._deferreds = [];\n                    }\n                });\n            });\n            // Shutdown if `error` event is emitted.\n            _this._socket.on('error', function (err) {\n                // Close terminal session.\n                _this._close();\n                // EIO, happens when someone closes our child process: the only process\n                // in the terminal.\n                // node < 0.6.14: errno 5\n                // node >= 0.6.14: read EIO\n                if (err.code) {\n                    if (~err.code.indexOf('errno 5') || ~err.code.indexOf('EIO'))\n                        return;\n                }\n                // Throw anything else.\n                if (_this.listeners('error').length < 2) {\n                    throw err;\n                }\n            });\n            // Cleanup after the socket is closed.\n            _this._socket.on('close', function () {\n                _this.emit('exit', _this._agent.exitCode);\n                _this._close();\n            });\n        });\n        _this._file = file;\n        _this._name = name;\n        _this._readable = true;\n        _this._writable = true;\n        return _this;\n    }\n    /**\n     * openpty\n     */\n    WindowsTerminal.open = function (options) {\n        throw new Error('open() not supported on windows, use Fork() instead.');\n    };\n    /**\n     * Events\n     */\n    WindowsTerminal.prototype.write = function (data) {\n        var _this = this;\n        this._defer(function () {\n            _this._agent.inSocket.write(data);\n        });\n    };\n    /**\n     * TTY\n     */\n    WindowsTerminal.prototype.resize = function (cols, rows) {\n        var _this = this;\n        if (cols <= 0 || rows <= 0) {\n            throw new Error('resizing must be done using positive cols and rows');\n        }\n        this._defer(function () {\n            _this._agent.resize(cols, rows);\n        });\n    };\n    WindowsTerminal.prototype.destroy = function () {\n        var _this = this;\n        this._defer(function () {\n            _this.kill();\n        });\n    };\n    WindowsTerminal.prototype.kill = function (signal) {\n        var _this = this;\n        this._defer(function () {\n            if (signal) {\n                throw new Error('Signals not supported on windows.');\n            }\n            _this._close();\n            _this._agent.kill();\n        });\n    };\n    WindowsTerminal.prototype._defer = function (deferredFn) {\n        var _this = this;\n        // Ensure that this method is only used within Terminal class.\n        if (!(this instanceof WindowsTerminal)) {\n            throw new Error('Must be instanceof WindowsTerminal');\n        }\n        // If the terminal is ready, execute.\n        if (this._isReady) {\n            deferredFn.apply(this, null);\n            return;\n        }\n        // Queue until terminal is ready.\n        this._deferreds.push({\n            run: function () { return deferredFn.apply(_this, null); }\n        });\n    };\n    Object.defineProperty(WindowsTerminal.prototype, \"process\", {\n        get: function () { return this._name; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowsTerminal.prototype, \"master\", {\n        get: function () { throw new Error('master is not supported on Windows'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowsTerminal.prototype, \"slave\", {\n        get: function () { throw new Error('slave is not supported on Windows'); },\n        enumerable: true,\n        configurable: true\n    });\n    return WindowsTerminal;\n}(terminal_1.Terminal));\nexports.WindowsTerminal = WindowsTerminal;\n//# sourceMappingURL=windowsTerminal.js.map","const electron = require('electron');\nconst app = electron.app;\nconst ipcMain = electron.ipcMain;\nconst dialog = electron.dialog;\nconst BrowserWindow = electron.BrowserWindow;\nconst { launchTerminal } = require('./terminal');\nconst path = require('path');\nconst isDev = require('electron-is-dev');\nrequire('./menu');\nlet mainWindow;\nfunction createWindow() {\n  mainWindow = new BrowserWindow({\n    width: 900, \n    height: 680,\n    webPreferences: {\n      nodeIntegration: true\n  }\n  });\n  mainWindow.loadURL(isDev ? 'http://localhost:3000' : `file://${path.join(__dirname, '../build/index.html')}`);\n  if (isDev) {\n    // Open the DevTools.\n    //BrowserWindow.addDevToolsExtension('<location to your react chrome extension>');\n    mainWindow.webContents.openDevTools();\n  }\n\n  mainWindow.on('closed', () => mainWindow = null);\n}\n\napp.on('ready', createWindow);\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  if (mainWindow === null) {\n    createWindow();\n  }\n})\nipcMain.on('open-directory-dialog', (event, p) => {\n  dialog.showOpenDialog({\n        properties: [p]\n      },function (files) {\n          if (files){// 如果有选中\n            // 发送选择的对象给子进程\n            event.sender.send('selectDir', files[0])\n          }\n      })\n})\n\n// 驱动终端\nlaunchTerminal(ipcMain);","\n\nconst electron = require('electron');\nconst Menu = electron.Menu;\nvar template = [{\n  label: '编辑',\n  submenu: [{\n    label: '撤销',\n    accelerator: 'CmdOrCtrl+Z',\n    role: 'undo'\n  }, {\n    label: '重做',\n    accelerator: 'Shift+CmdOrCtrl+Z',\n    role: 'redo'\n  }, {\n    type: 'separator'\n  }, {\n    label: '复制',\n    accelerator: 'CmdOrCtrl+C',\n    role: 'copy'\n  }, {\n    label: '粘贴',\n    accelerator: 'CmdOrCtrl+V',\n    role: 'paste'\n  }]\n}, {\n  label: '帮助',\n  role: 'help',\n  submenu: [{\n    label: '学习更多',\n    click: function () {\n      electron.shell.openExternal('http://electron.atom.io')\n    }\n  }]\n}];\n\nconst menu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(menu);","const pty = require('node-pty');\nclass Shell {\n  constructor() {\n    this.sender = null;\n    this.shell = pty.spawn('/bin/zsh', [], {\n      name: 'xterm-color',\n      cwd: process.env.HOME,\n      env: process.env\n    });\n    var that = this;\n    this.shell.on('data', function () {\n      that.sender && that.sender.send('shell-out', arguments[0])\n      process.stdout.write(arguments[0]);\n    });\n    this.sender = null;\n  }\n  write(sender, p) {\n    this.sender = sender;\n    this.shell.write(p + '\\r')\n  }\n}\nexports.launchTerminal = function (ipcMain) {\n  const shell = new Shell();\n\n  ipcMain.on('shell-message', (event, p) => {\n    shell.write(event.sender, p);\n  })\n}","module.exports = require(\"child_process\");","module.exports = require(\"electron\");","module.exports = require(\"events\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");"],"sourceRoot":""}