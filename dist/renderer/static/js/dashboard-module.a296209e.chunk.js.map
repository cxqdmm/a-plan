{"version":3,"sources":["renderer/util/common.js","renderer/pages/dashboard/module/index.js","../node_modules/@babel/runtime/helpers/esm/toArray.js"],"names":["appDirectory","fs","realpathSync","process","cwd","resolveApp","relativePath","path","resolve","db","nedb","createDb","filename","autoload","Module","project","arguments","length","undefined","find","type","then","_ref","arr","params","Object","arrayWithHoles","iterableToArray","nonIterableRest","slice","remove","insert","name","dir","update","this","setState","doc","templates","readdirSync","filter","item","test","observable","__webpack_exports__"],"mappings":"8TAoBA,UAAMA,EAAeC,IAAGC,aAAaC,QAAQC,OACvCC,EAAa,SAAAC,GAAY,OAAIC,IAAKC,QAAQR,EAAcM,IClB9D,IAAMG,EAAKC,IAAKC,SAAS,CACvBC,SAAU,0BACVC,UAAU,IAGNC,sDACJJ,KAAOA,yIAGsB,IAAdK,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACvBP,EAAGU,KAAK,CAAEC,KAAM,gBAAiBC,KAAK,SAAAC,GAAiB,ICV5CC,EDUgCC,GCVhCD,EDU4CD,ECTlDG,OAAAC,EAAA,EAAAD,CAAcF,IAASE,OAAAE,EAAA,EAAAF,CAAeF,IAASE,OAAAG,EAAA,EAAAH,IDSGI,MAAA,GACjDL,EAAOP,OAAS,EAClBR,EAAGqB,OAAO,CAAEV,KAAM,gBAAiB,GAAMC,KAAK,WAC5CZ,EAAGsB,OAAO,CACRX,KAAM,cACNY,KAAMjB,EAAQiB,KACdC,IAAKlB,EAAQkB,QAGU,IAAlBT,EAAOP,OAChBR,EAAGyB,OAAO,CAAEd,KAAM,eAAiB,CACjCY,KAAMjB,EAAQiB,KACdC,IAAKlB,EAAQkB,MAGfxB,EAAGsB,OAAO,CACRX,KAAM,cACNY,KAAMjB,EAAQiB,KACdC,IAAKlB,EAAQkB,QAInBE,KAAKC,SAAS,CACZrB,QAASA,oLAKCN,EAAGU,KAAK,CAAEC,KAAM,uBAA5BiB,SACAF,KAAKC,SAAS,CACZrB,QAASsB,EAAI,IAAM,6IAIrB,IAAMC,EDvBKrC,IAAGsC,YAAYlC,EAAW,qBAChBmC,OAAO,SAAAC,GAC5B,OAAQ,MAAMC,KAAKD,KCsBnBN,KAAKC,SAAS,CACZE,UAAWA,kDAvCdK,6EAAqB,6CACrBA,6EAAuB,SA0CXC,EAAA,YAAI9B","file":"static/js/dashboard-module.a296209e.chunk.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nexport function debounce(fn, time) {\n  let startTime, interval = time || 300, clock;\n  return function(e) {\n    let  targetValue = e.target.value;\n    if (clock) {\n      if ((new Date()).getTime - startTime > interval) {\n        clearTimeout(clock);\n      }\n    }\n    startTime = (new Date()).getTime();\n    clock = setTimeout(() => {\n      fn(targetValue);\n      clearTimeout(clock);\n    }, interval);\n  }\n}\n\nconst appDirectory = fs.realpathSync(process.cwd());\nconst resolveApp = relativePath => path.resolve(appDirectory, relativePath);\n\nexport function getTemplate() {\n  const dirs = fs.readdirSync(resolveApp('src/web-template'));\n  const templates = dirs.filter(item => {\n    return !/^\\./.test(item);\n  })\n  return templates;\n}","import { observable } from 'redux';\nimport nedb from 'util/nedb';\nimport { getTemplate } from 'util/common';\nconst db = nedb.createDb({\n  filename: 'store/dashboard/project',\n  autoload: true,\n})\n\nclass Module {\n  nedb = nedb;\n  @observable project = {}\n  @observable templates = []\n  setEditProject(project = {}) {\n    db.find({ type: 'editProject' }).then(([...params]) => {\n      if (params.length > 1) {\n        db.remove({ type: 'editProject' }, true).then(() => {\n          db.insert({\n            type: 'editProject',\n            name: project.name,\n            dir: project.dir,\n          })\n        })\n      } else if (params.length === 1) {\n        db.update({ type: 'editProject' }, {\n          name: project.name,\n          dir: project.dir,\n        })\n      } else {\n        db.insert({\n          type: 'editProject',\n          name: project.name,\n          dir: project.dir,\n        })\n      }\n    })\n    this.setState({\n      project: project,\n    })\n  }\n  async getEditProjectFromCache() {\n    let doc;\n    doc = await db.find({ type: 'editProject' });\n    this.setState({\n      project: doc[0] || {},\n    })\n  }\n  getTemplate() {\n    const templates = getTemplate();\n    this.setState({\n      templates: templates,\n    })\n  }\n}\nexport default new Module();\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || nonIterableRest();\n}"],"sourceRoot":""}