{"version":3,"sources":["renderer/redux/store.js","renderer/redux/observable.js","renderer/redux/module.js","renderer/redux/redux.js","renderer/redux/index.js"],"names":["_state","Symbol","Store","props","_this","this","Object","classCallCheck","processReducer","out","_modules","reduce","module","state","name","observableProps","forEach","prop","value","getPropValue","_useState","useState","_useState2","slicedToArray","setState","setPropDispatch","modules","_context","context","newState","LazyInitializeSymbol","pendingDecorators","$store","cacheDescriptor","initializeInstance","target","decorators","key","addHiddenProp","d","propertyCreator","descriptor","object","propName","defineProperty","enumerable","writable","configurable","ObservableObjectAdministration","$value","Map","$dispatch","get","isImmutable","toJS","immutableValue","fromJS","set","dispatch","Error","concat","read","v","write","keys","observable","initialValue","initializer","call","undefined","prototype","hasOwnProperty","adm","asObservableObject","addObservableProp","inheritedDecorators","assign","decoratorTarget","createPropertyInitializerDescriptor","apply","arguments","Module","model","constructor","_module","setDispatch","setObservablePropDispatch","data","getOwnPropertyNames","console","log","createStore","dataModule","Array","isArray","elem","push","connect","component","item","flag","useContext","objectSpread","useRedux","store","Component","react_default","a","createElement","Provider","__webpack_require__","__webpack_exports__","redux_useRedux","redux_connect"],"mappings":"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","file":"static/js/dashboard-component-terminal.a6c40d3c.chunk.js","sourcesContent":["import { useState } from 'react';\nconst _state = Symbol('state');\nexport default class Store {\n  constructor(props) {\n    this._context = props.context;\n    this[_state] = {};\n    this._modules = props.modules || [];\n  }\n  get context() {\n    return this._context;\n  }\n  get state() {\n    return this[_state];\n  }\n\n  set state(newState) {\n    if (newState !== this[_state]) {\n      this[_state] = newState;\n    }\n  }\n  /**\n   * @argument 该函数必须在函数式组件内部使用\n   */\n  processReducer = () => {\n    const out = this._modules.reduce((out, module) => {\n      out.state[module.name] = {};\n      module.observableProps.forEach(prop => {\n        let value = module.getPropValue(prop)\n        const [state, setState] = useState(value);\n        out.state[module.name][prop] = state;\n        module.setPropDispatch(prop, setState);\n      })\n      out.modules[module.name] = module.module;\n      return out;\n    }, {\n        state: {},\n        modules: {},\n      })\n    this.state = out.state;\n    this.modules = out.modules;\n  }\n}\n","\nimport { fromJS, isImmutable} from 'immutable';\nconst LazyInitializeSymbol = Symbol('lazy initialize symbol');\nconst pendingDecorators = Symbol('pending decorator');\nconst $store = Symbol('@proxy')\nlet cacheDescriptor = {};\n\nfunction createObservable(target, prop, descriptor) {\n  let decoratorFactory = createPropDecorator(function propertyCreator(target, prop, descriptor) {\n    var initialValue = descriptor\n      ? descriptor.initializer\n        ? descriptor.initializer.call(target)\n        : descriptor.value\n      : undefined;\n    asObservableObject(target).addObservableProp(prop, initialValue)\n  });\n  return decoratorFactory.apply(null, arguments);\n}\n\nfunction createPropDecorator(propertyCreator) {\n  return function decoratorFactory() {\n    let decorator = function decorate(target, prop, descriptor) {\n      if (!Object.prototype.hasOwnProperty.call(target, pendingDecorators)) {\n        var inheritedDecorators = target[pendingDecorators];\n        addHiddenProp(target, pendingDecorators, Object.assign({}, inheritedDecorators));\n      }\n      target[pendingDecorators][prop] = {\n        prop: prop,\n        propertyCreator: propertyCreator,\n        descriptor: descriptor,\n        decoratorTarget: target,\n      };\n      return createPropertyInitializerDescriptor(prop);\n    }\n    return decorator.apply(null, arguments);\n  }\n}\n// 返回初始的Descriptor\nfunction createPropertyInitializerDescriptor(prop) {\n  return (cacheDescriptor[prop] ||\n    (cacheDescriptor[prop] = {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        initializeInstance(this);\n        return this[prop];\n      },\n      set: function (value) {\n        initializeInstance(this);\n        this[prop] = value;\n      }\n    }));\n}\n\n// 该函数相当牛逼，用于修改实例属性的decorator 从 createPropertyInitializerDescriptor => propertyCreator,\n// 注册实例属性的代理\nfunction initializeInstance(target) {\n  if (target[LazyInitializeSymbol] === true)\n    return;\n  var decorators = target[pendingDecorators];\n  if (decorators) {\n    addHiddenProp(target, LazyInitializeSymbol, true);\n    for (var key in decorators) {\n      var d = decorators[key];\n      d.propertyCreator(target, d.prop, d.descriptor);\n    }\n  }\n}\n\nfunction addHiddenProp(object, propName, value) {\n  Object.defineProperty(object, propName, {\n    enumerable: false,\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\n\nfunction asObservableObject(target) {\n  if (Object.prototype.hasOwnProperty.call(target, $store))\n    return target[$store];\n  const adm = new ObservableObjectAdministration(target);\n  addHiddenProp(target, $store, adm);\n  return adm;\n}\n\n// 数据源的代理 代理内部管理数据\nclass ObservableObjectAdministration {\n  constructor(target) {\n    this.$value = new Map();\n    this.$dispatch = new Map();\n    this.target = target;\n  }\n  read(prop) {\n    let value = this.$value.get(prop);\n    if (isImmutable(value)) {\n      return value.toJS();\n    }\n    return value;\n  }\n  write(prop, value) {\n    let immutableValue = value;\n    if (!isImmutable(value)) {\n      immutableValue = fromJS(value)\n    }\n    this.$value.set(prop, immutableValue);\n    const dispatch = this.$dispatch.get(prop);\n    if (!dispatch) {\n      throw new Error(`${prop} is not observable, please use observable decorater to ${prop}`)\n    } \n    if (dispatch) {\n      dispatch(value);\n    }\n  }\n  addObservableProp(prop, value) {\n    // to do 添加enhancer 生成observableValue\n    let target = this.target;\n    //observableValue 实际上是一个proxy，可以很方便监控对象的任何行为\n    this.$value.set(prop, fromJS(value));\n    Object.defineProperty(target, prop, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return this[$store].read(prop);\n      },\n      set: function (v) {\n        this[$store].write(prop, v);\n      }\n    })\n  }\n  outputProps() {\n    return Object.keys(this.$value);\n  }\n  setDispatch(prop, dispatch) {\n    this.$dispatch.set(prop, dispatch);\n  }\n  getDispatch(prop) {\n    return this.$dispatch.get(prop);\n  }\n}\n\n// 监控属性值的操作，用proxy实现\n\nfunction getObservableProps(model) {\n  if (!model[pendingDecorators]) {\n    return [];\n  }\n  return Object.keys(model[pendingDecorators]);\n}\nfunction getObservablePropDispatch(model, prop) {\n  if (!model[$store]) {\n    throw new Error('model is not observable')\n  }\n  return model[$store].getDispatch(prop);\n}\nfunction setObservablePropDispatch(model, prop, dispatch) {\n  if (!model[$store]) {\n    throw new Error('model is not observable')\n  }\n  model[$store].setDispatch(prop, dispatch);\n}\n\nlet observable = createObservable;\n\nexport { observable, getObservableProps, setObservablePropDispatch, getObservablePropDispatch }\n","import { getObservableProps, setObservablePropDispatch } from './observable';\n/**\n * @argument 数据模块\n */\nexport default class Module {\n  constructor(module) {\n    this.name = module.constructor.name;\n    this._module = module;\n    // 被观察的属性\n    this.observableProps = getObservableProps(this._module);\n  }\n  getPropValue(prop) {\n    return this._module[prop];\n  }\n  setPropDispatch(prop, dispatch) {\n    if (!this._module.setState) {\n      this._module.setState = this.setState;\n    }\n    setObservablePropDispatch(this._module, prop, dispatch);   \n  }\n  setState(data) {\n    const props = Object.getOwnPropertyNames(data);\n    props.forEach(prop => {\n      console.log('dispatch => ',this.constructor.name, 'prop=',prop);\n      this[prop] = data[prop];\n\n    })\n  }\n  get module() {\n    return this._module;\n  }\n}","import React, { useContext } from 'react';\nimport Store from './store';\nimport Module from './module';\n\nconst Provider = (props) => {\n  const store = props.store;\n  store.processReducer();\n  return <store.context.Provider value={{ state: store.state, modules: store.modules }}>\n    {props.children}\n  </store.context.Provider>\n}\n\n/**\n * \n * @param {*} context \n * @param {*} dataModule \n * 这个函数用于建立store和数据模块的关联\n */\nfunction createStore(context, dataModule) {\n  let modules = [];\n  if (Array.isArray(dataModule)) {\n    dataModule.forEach(elem => {\n      if (typeof (elem) === 'object') {\n        elem.context = context;\n        modules.push(new Module(elem));\n      }\n    })\n  } else {\n    if (typeof (dataModule) === 'object') {\n      dataModule.context = context;\n      modules.push(new Module(dataModule));\n    }\n  }\n  return new Store({\n    context,\n    modules,\n  })\n}\n\n/**\n * @argument 关联dispatch 和 state 到 组件上\n * @param {*} context \n * @param {*} mapState \n * @param {*} mapDispatch \n */\nconst connect = modules => component => {\n  return function wrapComponent(props) {\n    let moduleArr = [].concat(modules);\n    let contextMap = moduleArr.reduce((out, item) => {\n      if (item.context) {\n        out.set(item.context,true);\n      }\n      return out;\n    }, new Map())\n    contextMap.forEach((flag, context) => {\n      useContext(context)\n    })\n    return component({ ...props});\n  }\n}\n\nconst useRedux = store => Component => {\n  return function Privider(props) {\n    store.processReducer();\n    return <store.context.Provider value={{ state: store.state, modules: store.modules }}>\n      <Component {...props}/>\n    </store.context.Provider>\n  }\n}\n\n\n\n\nexport {\n  useRedux,\n  Provider,\n  createStore,\n  connect,\n}","import { useRedux, Provider, createStore, connect } from './redux';\nimport { observable } from './observable';\n\nexport {\n  useRedux,\n  Provider,\n  createStore,\n  connect,\n  observable,\n}"],"sourceRoot":""}