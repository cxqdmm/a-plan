{"version":3,"sources":["renderer/pages/dashboard/component/terminal/util/HistoryController.js"],"names":["HistoryController","size","Object","_Users_mac_Documents_cxq_web_a_plan_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","entries","cursor","_Users_mac_Documents_cxq_web_a_plan_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","entry","trim","length","push","pop","idx","Math","max","min"],"mappings":"oOAGaA,EAAb,WACE,SAAAA,EAAYC,GAAOC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACjBI,KAAKH,KAAOA,EACZG,KAAKC,QAAU,GACfD,KAAKE,OAAS,EAJlB,OAAAJ,OAAAK,EAAA,EAAAL,CAAAF,EAAA,EAAAQ,IAAA,OAAAC,MAAA,SAUOC,GAEkB,KAAjBA,EAAMC,SAGND,IADcN,KAAKC,QAAQD,KAAKC,QAAQO,OAAS,KAGrDR,KAAKC,QAAQQ,KAAKH,GACdN,KAAKC,QAAQO,OAASR,KAAKH,MAC7BG,KAAKC,QAAQS,IAAI,GAEnBV,KAAKE,OAASF,KAAKC,QAAQO,WArB/B,CAAAJ,IAAA,SAAAC,MAAA,WA4BIL,KAAKE,OAASF,KAAKC,QAAQO,SA5B/B,CAAAJ,IAAA,cAAAC,MAAA,WAmCI,IAAMM,EAAMC,KAAKC,IAAI,EAAGb,KAAKE,OAAS,GAEtC,OADAF,KAAKE,OAASS,EACPX,KAAKC,QAAQU,KArCxB,CAAAP,IAAA,UAAAC,MAAA,WA4CI,IAAMM,EAAMC,KAAKE,IAAId,KAAKC,QAAQO,OAAQR,KAAKE,OAAS,GAExD,OADAF,KAAKE,OAASS,EACPX,KAAKC,QAAQU,OA9CxBf,EAAA","file":"static/js/dashboard-component-terminal-util-HistoryController.e2bc80eb.chunk.js","sourcesContent":["/**\n * The history controller provides an ring-buffer\n */\nexport class HistoryController {\n  constructor(size) {\n    this.size = size;\n    this.entries = [];\n    this.cursor = 0;\n  }\n\n  /**\n   * Push an entry and maintain ring buffer size\n   */\n  push(entry) {\n    // Skip empty entries\n    if (entry.trim() === \"\") return;\n    // Skip duplicate entries\n    const lastEntry = this.entries[this.entries.length - 1];\n    if (entry === lastEntry) return;\n    // Keep track of entries\n    this.entries.push(entry);\n    if (this.entries.length > this.size) {\n      this.entries.pop(0);\n    }\n    this.cursor = this.entries.length;\n  }\n\n  /**\n   * Rewind history cursor on the last entry\n   */\n  rewind() {\n    this.cursor = this.entries.length;\n  }\n\n  /**\n   * Returns the previous entry\n   */\n  getPrevious() {\n    const idx = Math.max(0, this.cursor - 1);\n    this.cursor = idx;\n    return this.entries[idx];\n  }\n\n  /**\n   * Returns the next entry\n   */\n  getNext() {\n    const idx = Math.min(this.entries.length, this.cursor + 1);\n    this.cursor = idx;\n    return this.entries[idx];\n  }\n}\n"],"sourceRoot":""}